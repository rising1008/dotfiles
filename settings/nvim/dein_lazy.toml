[[plugins]]
repo = 'preservim/tagbar'
hook_add = '''
    nmap <C-t> :TagbarToggle<CR>

    let g:tagbar_ctags_bin = '/usr/local/bin/ctags'

    set tags=.tags;$HOME

    function! s:execute_ctags() abort
      " 探すタグファイル名
      let tag_name = '.tags'
      " ディレクトリを遡り、タグファイルを探し、パス取得
      let tags_path = findfile(tag_name, '.;')
      " タグファイルパスが見つからなかった場合
      if tags_path ==# ''
        return
      endif

      " タグファイルのディレクトリパスを取得
      " `:p:h`の部分は、:h filename-modifiersで確認
      let tags_dirpath = fnamemodify(tags_path, ':p:h')
      " 見つかったタグファイルのディレクトリに移動して、ctagsをバックグラウンド実行（エラー出力破棄）
      execute 'silent !cd' tags_dirpath '&& ctags -R -f' tag_name '2> /dev/null &'
    endfunction

    augroup ctags
      autocmd!
      autocmd BufWritePost * call s:execute_ctags()
    augroup END
'''

[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = ['markdown']
hook_add = '''
  autocmd BufRead,BufNewFile *.mkd,*.md  set filetype=markdown
  let g:vim_markdown_folding_disabled=1
'''

[[plugins]]
repo = 'previm/previm'
hook_add = '''
  let g:previm_open_cmd = 'open -a Google\ Chrome'
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']
hook_add = '''
  autocmd BufRead,BufNewFile *.ts set filetype=typescript
  let g:typescript_indent_disable = 1
'''

[[plugins]]
repo = 'ianks/vim-tsx'
on_ft = ['typescript']
hook_add = '''
  autocmd BufRead,BufNewFile *.tsx set filetype=typescript
'''

[[plugins]]
repo = 'PProvost/vim-ps1'
hook_add = '''
  let g:ps1_nofold_blocks = 1
  let g:ps1_nofold_sig = 1
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
# ddc.vimの依存
[[plugins]]
repo = 'vim-denops/denops.vim'
# ddc.vimのsource
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
# ddc.vimのsource
[[plugins]]
repo = 'Shougo/ddc-around'
# ddc.vimのsource
[[plugins]]
repo = 'LumaKernel/ddc-file'
# ポップアップウィンドウ
[[plugins]]
repo = 'Shougo/pum.vim'
# ddc.vimのfilter
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
# ddc.vimのfilter
[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
# ddc.vimのfilter
[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = ['vim-lsp']
hook_add = '''
let g:lsp_settings = {
    \ 'efm-langserver': {
        \ 'disabled': v:false
    \ },
\ }
'''
#hook_add = '''
#  augroup LspEFM
#    au!
#    autocmd User lsp_setup call lsp#register_server({
#        \ 'name': 'efm-langserver',
#        \ 'cmd': {server_info->['efm-langserver', '-logfile='.$HOME.'/.config/efm-langserver/efm-langserver.log']},
#        \ 'allowlist': ['yaml.cloudformation', 'typescript'],
#        \ })
#    autocmd BufWritePre *.ts,*.tsx call execute('LspDocumentFormatSync --server=efm-langserver')
#  augroup END
#'''
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_add = '''
    call ddc#custom#patch_global('completionMenu', 'pum.vim')
    call ddc#custom#patch_global('sources', [
        \ 'around',
        \ 'vim-lsp',
        \ 'file'
        \ ])
    call ddc#custom#patch_global('sourceOptions', {
        \ '_': {
        \   'matchers': ['matcher_head'],
        \   'sorters': ['sorter_rank'],
        \   'converters': ['converter_remove_overlap'],
        \ },
        \ 'around': {'mark': 'Around'},
        \ 'vim-lsp': {
        \   'mark': 'LSP', 
        \   'matchers': ['matcher_head'],
        \   'forceCompletionPattern': '\.|:|->|"\w+/*'
        \ },
        \ 'file': {
        \   'mark': 'file',
        \   'isVolatile': v:true, 
        \   'forceCompletionPattern': '\S/\S*'
        \ }})
    call ddc#enable()
    inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
    inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
'''

