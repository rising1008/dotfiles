[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
  autocmd VimEnter * ++nested colorscheme onedark
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    set laststatus=2
    set showtabline=2
    set noshowmode
    let g:lightline = {
    \   'colorscheme': 'onedark',
    \   'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \   'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
    \   'active': {
    \     'left': [
    \       ['mode', 'paste'],
    \       ['readonly', 'filename', 'modified']
    \     ]
    \   }
    \ }
    let g:lightline.tab = {
    \   'active': [ 'tabnum', 'filename', 'modified' ],
    \   'inactive': [ 'tabnum', 'filename', 'modified' ]
    \ }
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo ='kristijanhusak/defx-git'

[[plugins]]
repo ='kristijanhusak/defx-icons'

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
hook_add = '''
autocmd VimEnter * execute 'Defx'
nnoremap <silent> <C-f> :<C-u> Defx <CR>

let g:defx_icons_enable_syntax_highlight = 0
let g:defx_icons_column_length = 2
let g:defx_icons_directory_icon = ''
let g:defx_icons_mark_icon = '*'
let g:defx_icons_copy_icon = ''
let g:defx_icons_move_icon = ''
let g:defx_icons_parent_icon = ''
let g:defx_icons_default_icon = ''
let g:defx_icons_directory_symlink_icon = ''

call defx#custom#column('icon', {
    \ 'directory_icon': '▸ ',
    \ 'opened_icon': '▾ ',
    \ 'root_icon': '  ',
    \ })

call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : '✹ ',
  \ 'Staged'    : '✚ ',
  \ 'Untracked' : '✭ ',
  \ 'Renamed'   : '➜ ',
  \ 'Unmerged'  : '═ ',
  \ 'Ignored'   : '☒ ',
  \ 'Deleted'   : '✖ ',
  \ 'Unknown'   : '? '
  \ })

call defx#custom#column('mark', {
    \ 'readonly_icon': '✗',
    \ 'selected_icon': '✓',
    \ })

" ウィンドウ幅
" 起動時に分割
" 'split': 'vertical',
" ファイルツリーを左側に表示
call defx#custom#option('_', {
    \ 'root_marker': '≡ ',
    \ 'winwidth': 50,
    \ 'split': 'vertical',
    \ 'direction': 'topleft',
    \ 'show_ignored_files': 0,
    \ 'buffer_name': 'explore',
    \ 'toggle': 1,
    \ 'resume': 1,
    \ 'columns': 'indent:icon:git:icons:filename',
    \ 'ignored_files': '.mypy_cache,.pytest_cache,.git,$XDG_CACHE_HOME,.DS_Store,__pycache__,.sass-cache,*.egg-info,*.pyc,*.swp'
    \ })

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort

    nnoremap <silent><buffer><expr> C
    \ defx#do_action('toggle_columns',
    \                'mark:indent:icon:filename:type:size:time')

    " ファイルを開く
    nnoremap <silent><buffer><expr> <CR>
    \ defx#is_directory() ? defx#do_action('open') :
    \ defx#do_action('multi', [['drop', 'vsplit'], 'quit'])
    nnoremap <silent><buffer><expr> <Space>
    \ defx#do_action('multi', [['drop'], 'quit'])
    nnoremap <silent><buffer><expr><nowait> t
    \ defx#do_action('multi', ['quit', ['open', 'tab drop']])

    nnoremap <silent><buffer><expr> E
    \ defx#do_action('multi', ['quit', ['open', 'vsplit']])

    nnoremap <silent><buffer><expr> P
    \ defx#do_action('open', 'pedit')

    "  隠しファイルを表示/非表示する
    nnoremap <silent><buffer><expr> .
    \ defx#do_action('toggle_ignored_files')

    "  親ディレクトリに移動する
    nnoremap <silent><buffer><expr> <BS>
    \ defx#do_action('cd', ['..'])

    " フォルダopenをトグル
    nnoremap <silent><buffer><expr> l
    \ defx#do_action('open_tree', 'toggle')

    " 【ESC】 / 【q】 defx.nvimを終了する
    nnoremap <silent><buffer><expr> <Esc> 
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> q
    \ defx#do_action('quit')

    " 【j】 カーソルを下に移動する
    nnoremap <silent><buffer><expr> j
    \ line('.') == line('$') ? 'gg' : 'j'

    " カーソルを上に移動する
    nnoremap <silent><buffer><expr> k
    \ line('.') == 1 ? 'G' : 'k'

    " 新しいファイルを作成する
    nnoremap <silent><buffer><expr> N
    \ defx#do_action('new_file')

    " ファイルを削除する
    nnoremap <silent><buffer><expr> d
    \ defx#do_action('remove')

    " ファイル/ディレクトリのパスをコピーする
    nnoremap <silent><buffer><expr> yy
    \ defx#do_action('yank_path')

    " ファイルを実行する
    nnoremap <silent><buffer><expr> x
    \ defx#do_action('execute_system')

    " ファイル名を変更する
    nnoremap <silent><buffer><expr> r
    \ defx#do_action('rename')

    " ファイルをコピーする
    nnoremap <silent><buffer><expr> c
    \ defx#do_action('copy')

    " ファイルを貼り付ける
    nnoremap <silent><buffer><expr> p
    \ defx#do_action('paste')

    " 新しいディレクトリを作成する
    nnoremap <silent><buffer><expr> K
    \ defx#do_action('new_directory')

    " ファイルを移動する
    nnoremap <silent><buffer><expr> m
    \ defx#do_action('move')

    " ウィンドウを水平分割してファイルを開く
    nnoremap <silent><buffer><expr> s
    \ defx#do_action('open', 'split')

    " ウィンドウを垂直分割してファイルを開く
    nnoremap <silent><buffer><expr> v
    \ defx#do_action('open', 'vsplit')

    " ホームディレクトリに移動する
    nnoremap <silent><buffer><expr> ~
    \ defx#do_action('cd')

    " Neovim上のカレントディレクトリを変更する
    nnoremap <silent><buffer><expr> -
    \ defx#do_action('change_vim_cwd')

endfunction
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
  command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
    \   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap'))
'''

[[plugins]]
repo = 'voldikss/vim-floaterm'
hook_add = '''
    let g:floaterm_title = 'terminal: [$1/$2]'
    let g:floaterm_width = 0.7
    let g:floaterm_height = 0.7

    noremap <silent> <leader>to <C-\><C-n>:FloatermNew<CR>
    noremap <silent> <leader>tt <C-\><C-n>:FloatermToggle<CR>
    tnoremap <silent> <leader>to <C-\><C-n>:FloatermNew<CR>
    tnoremap <silent> <leader>t] <C-\><C-n>:FloatermNext<CR>
    tnoremap <silent> <leader>t[ <C-\><C-n>:FloatermPrev<CR>
    tnoremap <silent> <leader>tt <C-\><C-n>:FloatermToggle<CR>
    tnoremap <silent> <leader>tc <C-\><C-n>:FloatermKill!<CR>
    augroup vimrc_floaterm

        autocmd!
        autocmd QuitPre * FloatermKill!
    augroup END
'''

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'LumaKernel/ddc-file'

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
  augroup LspEFM
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'efm-langserver',
        \ 'cmd': {server_info->['efm-langserver', '-logfile='.$HOME.'/.config/efm-langserver/efm-langserver.log']},
        \ 'allowlist': ['yaml.cloudformation'],
        \ })
  augroup END
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
hook_add = '''
    call ddc#custom#patch_global('completionMenu', 'pum.vim')
    call ddc#custom#patch_global('sources', [
        \ 'around',
        \ 'vim-lsp',
        \ 'file'
        \ ])
    call ddc#custom#patch_global('sourceOptions', {
        \ '_': {
        \   'matchers': ['matcher_head'],
        \   'sorters': ['sorter_rank'],
        \   'converters': ['converter_remove_overlap'],
        \ },
        \ 'around': {'mark': 'Around'},
        \ 'vim-lsp': {
        \   'mark': 'LSP', 
        \   'matchers': ['matcher_head'],
        \   'forceCompletionPattern': '\.|:|->|"\w+/*'
        \ },
        \ 'file': {
        \   'mark': 'file',
        \   'isVolatile': v:true, 
        \   'forceCompletionPattern': '\S/\S*'
        \ }})
    call ddc#enable()
    inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
    inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
'''
